
gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a78  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074e  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039f  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042a  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ed  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name ^ (1<<pin_num);
  80:	fc 01       	movw	r30, r24
  82:	40 81       	ld	r20, Z
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <GPIO_config_output+0xe>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <GPIO_config_output+0xa>
  92:	24 2b       	or	r18, r20
  94:	20 83       	st	Z, r18
  96:	08 95       	ret

00000098 <GPIO_config_input_nopull>:
  98:	fc 01       	movw	r30, r24
  9a:	40 81       	ld	r20, Z
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <GPIO_config_input_nopull+0xe>
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	6a 95       	dec	r22
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <GPIO_config_input_nopull+0xa>
  aa:	24 2b       	or	r18, r20
  ac:	20 83       	st	Z, r18
  ae:	08 95       	ret

000000b0 <GPIO_write_low>:
  b0:	fc 01       	movw	r30, r24
  b2:	90 81       	ld	r25, Z
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <GPIO_write_low+0xe>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <GPIO_write_low+0xa>
  c2:	20 95       	com	r18
  c4:	29 23       	and	r18, r25
  c6:	20 83       	st	Z, r18
  c8:	08 95       	ret

000000ca <GPIO_read>:
/**********************************************************************
 * Function: GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{    
    return (*reg_name & (1<<pin_num));
  ca:	fc 01       	movw	r30, r24
  cc:	20 81       	ld	r18, Z
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <GPIO_read+0xe>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <GPIO_read+0xa>
  dc:	82 23       	and	r24, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Green LED at port B
    GPIO_config_output(&DDRB, LED_GREEN);
  e0:	65 e0       	ldi	r22, 0x05	; 5
  e2:	84 e2       	ldi	r24, 0x24	; 36
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_GREEN);
  ea:	65 e0       	ldi	r22, 0x05	; 5
  ec:	85 e2       	ldi	r24, 0x25	; 37
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <GPIO_write_low>

    // Configure the second LED at port C
    GPIO_config_output(&DDRB, LED_BLUE);
  f4:	64 e0       	ldi	r22, 0x04	; 4
  f6:	84 e2       	ldi	r24, 0x24	; 36
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_config_output>
    GPIO_write_low(&PORTB, LED_BLUE);
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	85 e2       	ldi	r24, 0x25	; 37
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 58 00 	call	0xb0	; 0xb0 <GPIO_write_low>

    // Configure Push button at port D and enable internal pull-up resistor
    GPIO_config_input_nopull(&DDRD, BUTTON);
 108:	63 e0       	ldi	r22, 0x03	; 3
 10a:	8a e2       	ldi	r24, 0x2A	; 42
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 4c 00 	call	0x98	; 0x98 <GPIO_config_input_nopull>
    GPIO_read (&PORTD, BUTTON);
 112:	63 e0       	ldi	r22, 0x03	; 3
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 65 00 	call	0xca	; 0xca <GPIO_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 e6       	ldi	r24, 0x69	; 105
 120:	98 e1       	ldi	r25, 0x18	; 24
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x42>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x4c>
 12c:	00 00       	nop
 12e:	16 c0       	rjmp	.+44     	; 0x15c <main+0x7c>
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	89 e6       	ldi	r24, 0x69	; 105
 134:	98 e1       	ldi	r25, 0x18	; 24
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x56>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x60>
 140:	00 00       	nop

    while(GPIO_read(PIND, BUTTON) == 0)
    {
        _delay_ms(BLINK_DELAY);

        PORTB = PORTB | (1<<LED_GREEN);
 142:	2d 9a       	sbi	0x05, 5	; 5
        PORTB = PORTB | (1<<LED_BLUE);
 144:	2c 9a       	sbi	0x05, 4	; 5
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	89 e6       	ldi	r24, 0x69	; 105
 14a:	98 e1       	ldi	r25, 0x18	; 24
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x6c>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x76>
 156:	00 00       	nop

        _delay_ms(BLINK_DELAY);

        PORTB = PORTB & ~(1<<LED_GREEN);
 158:	2d 98       	cbi	0x05, 5	; 5
        PORTB = PORTB & ~(1<<LED_BLUE);
 15a:	2c 98       	cbi	0x05, 4	; 5
    while (1)
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);

    while(GPIO_read(PIND, BUTTON) == 0)
 15c:	89 b1       	in	r24, 0x09	; 9
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 65 00 	call	0xca	; 0xca <GPIO_read>
 166:	88 23       	and	r24, r24
 168:	19 f3       	breq	.-58     	; 0x130 <main+0x50>
 16a:	d8 cf       	rjmp	.-80     	; 0x11c <main+0x3c>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
